<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zhangchuangla.system.message.mapper.SysMessageMapper">

    <resultMap id="BaseResultMap" type="cn.zhangchuangla.system.message.model.entity.SysMessage">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="type" column="type"/>
        <result property="level" column="level"/>
        <result property="senderName" column="sender_name"/>
        <result property="targetType" column="target_type"/>
        <result property="publishTime" column="publish_time"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="createBy" column="create_by"/>
        <result property="updateBy" column="update_by"/>
    </resultMap>

    <sql id="Base_Column_List">
        select id,
               title,
               content,
               type,
               level,
               sender_name,
               target_type,
               publish_time,
               is_deleted,
               create_time,
               update_time,
               create_by,
               update_by

        from sys_message
    </sql>

    <select id="pageSysMessage" resultMap="BaseResultMap">
        <include refid="Base_Column_List"/>
        order by id desc
    </select>

    <select id="pageUserMessage" resultType="cn.zhangchuangla.system.message.model.entity.SysMessage">
        SELECT DISTINCT sm.id AS id,
        sm.title AS title,
        IF(CHAR_LENGTH(sm.content) > 50, CONCAT(LEFT(sm.content, 50), '......'), sm.content) AS content,
        sm.type AS type,
        sm.level AS level,
        sm.sender_name AS sender_name,
        sm.target_type AS target_type,
        sm.publish_time AS publish_time,
        sm.is_deleted AS is_deleted,
        sm.create_time AS create_time,
        sm.update_time AS update_time,
        sm.create_by AS create_by,
        sm.update_by AS update_by
        FROM
        sys_message sm LEFT JOIN
        sys_user_message sum_link ON sm.id = sum_link.message_id
        <where>
            (
            -- 查询条件1:消息是专门给当前用户 --
            (sum_link.user_id = #{userId} OR sm.target_type = 'all')
            OR
            -- 查询条件2:消息是部门内消息--
            (sm.target_type = 'dept' AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
            OR
            -- 查询条件3:消息是角色内消息--
            (sm.target_type = 'role' AND sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id =
            #{userId}))
            )
            AND sm.is_deleted = 0
            <if test="request != null">
                <if test="request.title != null and request.title != ''">
                    AND sm.title LIKE CONCAT('%', #{request.title}, '%')
                </if>
                <if test="request.type != null">
                    AND sm.type = #{request.type.value}
                </if>
                <if test="request.level != null">
                    AND sm.level = #{request.level.value}
                </if>
                <if test="request.senderName != null and request.senderName != ''">
                    AND sm.sender_name LIKE CONCAT('%', #{request.senderName}, '%')
                </if>
            </if>
        </where>
        order by sm.create_time desc
    </select>

    <select id="getCurrentUserMessage" resultMap="BaseResultMap">
        SELECT DISTINCT sm.id             AS id,
                        sm.title          AS title,
                        sm.content        AS content,
                        sm.type           AS type,
                        sm.level          AS level,
                        sm.sender_name    AS sender_name,
                        sm.target_type    AS target_type,
                        sm.publish_time   AS publish_time,
                        sm.is_deleted     AS is_deleted,
                        sm.create_time    AS create_time,
                        sm.update_time    AS update_time,
                        sm.create_by      AS create_by,
                        sm.update_by      AS update_by
        FROM sys_message sm
                 LEFT JOIN
             sys_user_message sum_link ON sm.id = sum_link.message_id
        where (
            (sum_link.user_id = #{userId} OR sm.target_type = 'all')
                OR
            (sm.target_type = 'dept' AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
                OR
            (sm.target_type = 'role' AND
             sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id = #{userId}))
            )
          AND sm.id = #{messageId}
          AND sm.is_deleted = 0
    </select>

    <select id="getUserMessageCount" resultType="java.lang.Long">
        SELECT DISTINCT count(sm.id)
        FROM sys_message sm
                 LEFT JOIN
             sys_user_message sum_link ON sm.id = sum_link.message_id
        where (
            (sum_link.user_id = #{userId} OR sm.target_type = 'all')
                OR
            (sm.target_type = 'dept' AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
                OR
            (sm.target_type = 'role' AND
             sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id = #{userId}))
            )
          AND sm.is_deleted = 0
    </select>

    <select id="listMessageWithUserIdAndMessageId"
            resultMap="BaseResultMap">
        SELECT DISTINCT sm.id AS id,
        sm.title AS title,
        sm.content AS content,
        sm.type AS type,
        sm.level AS level,
        sm.sender_name AS sender_name,
        sm.target_type AS target_type,
        sm.publish_time AS publish_time,
        sm.is_deleted AS is_deleted,
        sm.create_time AS create_time,
        sm.update_time AS update_time,
        sm.create_by AS create_by,
        sm.update_by AS update_by
        FROM sys_message sm
        LEFT JOIN
        sys_user_message sum_link ON sm.id = sum_link.message_id
        where (
        (sum_link.user_id = #{userId} OR sm.target_type = 3)
        OR
        (sm.target_type = 2 AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
        OR
        (sm.target_type = 1 AND sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id = #{userId}))
        )
        AND sm.id in
        <foreach collection="messageIds" item="messageId" open="(" separator="," close=")">
            #{messageId}
        </foreach>
        AND sm.is_deleted = 0
    </select>
    <!-- 删除 pageUserSentMessage 语句（依赖 sender_id 字段） -->
    <!-- 分页查询用户已读消息 -->
    <select id="pageUserMessageIsRead" resultMap="BaseResultMap">
        SELECT DISTINCT sm.id AS id,
        sm.title AS title,
        IF(CHAR_LENGTH(sm.content) > 50, CONCAT(LEFT(sm.content, 50), '......'), sm.content) AS content,
        sm.type AS type,
        sm.level AS level,
        sm.sender_name AS sender_name,
        sm.target_type AS target_type,
        sm.publish_time AS publish_time,
        sm.is_deleted AS is_deleted,
        sm.create_time AS create_time,
        sm.update_time AS update_time,
        sm.create_by AS create_by,
        sm.update_by AS update_by
        FROM sys_message sm
        LEFT JOIN sys_user_message sum_link ON sm.id = sum_link.message_id
        <where>
            <!-- 基础权限过滤条件 -->
            (
            <!-- 查询条件1: 消息是专门给当前用户的 -->
            (sum_link.user_id = #{userId} OR sm.target_type = 'all')
            OR
            <!-- 查询条件2: 消息是部门内消息 -->
            (sm.target_type = 'dept' AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
            OR
            <!-- 查询条件3: 消息是角色内消息 -->
            (sm.target_type = 'role' AND sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id =
            #{userId}))
            )

            <!-- 已读消息ID筛选条件 -->
            <if test="messageIds != null and messageIds.size() &gt; 0">
                AND sm.id IN
                <foreach collection="messageIds" item="messageId" open="(" separator="," close=")">
                    #{messageId}
                </foreach>
            </if>

            AND sm.is_deleted = 0

            <!-- 动态查询条件 -->
            <if test="request != null">
                <if test="request.title != null and request.title != ''">
                    AND sm.title LIKE CONCAT('%', #{request.title}, '%')
                </if>
                <if test="request.type != null">
                    AND sm.type = #{request.type.value}
                </if>
                <if test="request.level != null">
                    AND sm.level = #{request.level.value}
                </if>
                <if test="request.senderName != null and request.senderName != ''">
                    AND sm.sender_name LIKE CONCAT('%', #{request.senderName}, '%')
                </if>
            </if>
        </where>
        ORDER BY sm.create_time DESC
    </select>
    <!-- 分页查询用户未读消息 -->
    <select id="pageUserMessageIsUnRead" resultType="cn.zhangchuangla.system.message.model.entity.SysMessage">
        SELECT DISTINCT sm.id AS id,
        sm.title AS title,
        IF(CHAR_LENGTH(sm.content) > 50, CONCAT(LEFT(sm.content, 50), '......'), sm.content) AS content,
        sm.type AS type,
        sm.level AS level,
        sm.sender_name AS sender_name,
        sm.target_type AS target_type,
        sm.publish_time AS publish_time,
        sm.is_deleted AS is_deleted,
        sm.create_time AS create_time,
        sm.update_time AS update_time,
        sm.create_by AS create_by,
        sm.update_by AS update_by
        FROM sys_message sm
        LEFT JOIN sys_user_message sum_link ON sm.id = sum_link.message_id
        <where>
            <!-- 基础权限过滤条件 -->
            (
            <!-- 查询条件1: 消息是专门给当前用户的 -->
            (sum_link.user_id = #{userId} OR sm.target_type = 'all')
            OR
            <!-- 查询条件2: 消息是部门内消息 -->
            (sm.target_type = 'dept' AND sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
            OR
            <!-- 查询条件3: 消息是角色内消息 -->
            (sm.target_type = 'role' AND sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id =
            #{userId}))
            )

            <!-- 未读消息ID筛选条件：排除已读消息 -->
            <if test="messageIds != null and messageIds.size() &gt; 0">
                AND sm.id NOT IN
                <foreach collection="messageIds" item="messageId" open="(" separator="," close=")">
                    #{messageId}
                </foreach>
            </if>

            AND sm.is_deleted = 0

            <!-- 动态查询条件 -->
            <if test="request != null">
                <if test="request.title != null and request.title != ''">
                    AND sm.title LIKE CONCAT('%', #{request.title}, '%')
                </if>
                <if test="request.type != null">
                    AND sm.type = #{request.type.value}
                </if>
                <if test="request.level != null">
                    AND sm.level = #{request.level.value}
                </if>
                <if test="request.senderName != null and request.senderName != ''">
                    AND sm.sender_name LIKE CONCAT('%', #{request.senderName}, '%')
                </if>
            </if>
        </where>
        ORDER BY sm.create_time DESC
    </select>

    <!-- 基于 publish_time DESC, id DESC 的上一条/下一条消息ID查询，限定在当前用户可见范围内 -->
    <select id="getPrevAndNextMessageId" resultType="cn.zhangchuangla.system.message.model.dto.AroundMessageIdDto">
        SELECT IF(t.prev_id IS NULL, -1, t.prev_id) AS prevId,
               IF(t.next_id IS NULL, -1, t.next_id) AS nextId
        FROM (SELECT sm.id,
                     LAG(sm.id) OVER (ORDER BY IFNULL(sm.publish_time, sm.create_time) DESC, sm.id DESC)  AS prev_id,
                     LEAD(sm.id) OVER (ORDER BY IFNULL(sm.publish_time, sm.create_time) DESC, sm.id DESC) AS next_id
              FROM sys_message sm
                       LEFT JOIN sys_user_message sum_link ON sm.id = sum_link.message_id
              WHERE (
                  (sum_link.user_id = #{userId} OR sm.target_type = 'all')
                      OR
                  (sm.target_type = 'dept' AND
                   sum_link.dept_id = (SELECT dept_id FROM sys_user WHERE user_id = #{userId}))
                      OR
                  (sm.target_type = 'role' AND
                   sum_link.role_id IN (SELECT role_id FROM sys_user_role WHERE user_id = #{userId}))
                  )
                AND sm.is_deleted = 0) AS t
        WHERE t.id = #{currentId}
    </select>
</mapper>
