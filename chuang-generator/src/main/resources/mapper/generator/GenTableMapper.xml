<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zhangchuangla.generator.mapper.GenTableMapper">

    <resultMap id="DatabaseTableResultMap" type="cn.zhangchuangla.generator.model.entity.DatabaseTable">
        <result column="TABLE_CATALOG" property="tableCatalog"/>
        <result column="TABLE_SCHEMA" property="tableSchema"/>
        <result column="TABLE_NAME" property="tableName"/>
        <result column="TABLE_TYPE" property="tableType"/>
        <result column="ENGINE" property="engine"/>
        <result column="VERSION" property="version"/>
        <result column="ROW_FORMAT" property="rowFormat"/>
        <result column="TABLE_ROWS" property="tableRows"/>
        <result column="AVG_ROW_LENGTH" property="avgRowLength"/>
        <result column="DATA_LENGTH" property="dataLength"/>
        <result column="MAX_DATA_LENGTH" property="maxDataLength"/>
        <result column="INDEX_LENGTH" property="indexLength"/>
        <result column="DATA_FREE" property="dataFree"/>
        <result column="AUTO_INCREMENT" property="autoIncrement"/>
        <result column="CREATE_TIME" property="createTime"/>
        <result column="UPDATE_TIME" property="updateTime"/>
        <result column="CHECK_TIME" property="checkTime"/>
        <result column="TABLE_COLLATION" property="tableCollation"/>
        <result column="CHECKSUM" property="checksum"/>
        <result column="CREATE_OPTIONS" property="createOptions"/>
        <result column="TABLE_COMMENT" property="tableComment"/>
    </resultMap>

    <resultMap id="BaseResultMap" type="cn.zhangchuangla.generator.model.entity.GenTable">
        <id property="tableId" column="table_id"/>
        <result property="tableName" column="table_name"/>
        <result property="tableComment" column="table_comment"/>
        <result property="className" column="class_name"/>
        <result property="packageName" column="package_name"/>
        <result property="moduleName" column="module_name"/>
        <result property="businessName" column="business_name"/>
        <result property="functionName" column="function_name"/>
        <result property="functionAuthor" column="function_author"/>
        <result property="tplCategory" column="tpl_category"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="remark" column="remark"/>
    </resultMap>
    <select id="listGenTable" resultMap="BaseResultMap">
        select table_id, table_name, table_comment, class_name, package_name, module_name, business_name, function_name,
        function_author, tpl_category, create_by, create_time, update_by, update_time, remark
        from gen_table
        <where>
            <if test="request.id != null">
                and id = #{request.id}
            </if>
            <if test="request.tableName != null and request.tableName != ''">
                and table_name like concat('%', #{request.tableName}, '%')
            </if>
            <if test="request.tableComment != null and request.tableComment != ''">
                and table_comment like concat('%', #{request.tableComment}, '%')
            </if>
            <if test="request.tableType != null">
                and table_type = #{request.tableType}
            </if>
            <if test="request.businessName != null and request.businessName != ''">
                and business_name like concat('%', #{request.businessName}, '%')
            </if>
            <if test="request.functionName != null and request.functionName != ''">
                and function_name like concat('%', #{request.functionName}, '%')
            </if>
            <if test="request.functionAuthor != null and request.functionAuthor != ''">
                and function_author like concat('%', #{request.functionAuthor}, '%')
            </if>
            <if test="request.createTime != null">
                and create_time >= #{request.createTime}
            </if>
        </where>
    </select>

    <select id="listDatabaseTables" resultMap="DatabaseTableResultMap">
        SELECT
        TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE, ENGINE, VERSION, ROW_FORMAT, TABLE_ROWS, AVG_ROW_LENGTH,
        DATA_LENGTH, MAX_DATA_LENGTH, INDEX_LENGTH, DATA_FREE, AUTO_INCREMENT, CREATE_TIME, UPDATE_TIME, CHECK_TIME,
        TABLE_COLLATION, CHECKSUM, CREATE_OPTIONS, TABLE_COMMENT
        FROM
        information_schema.tables
        WHERE
        table_schema = DATABASE()
        <where>
            <if test="request.tableName != null and request.tableName != ''">
                AND TABLE_NAME LIKE concat('%', #{request.tableName}, '%')
            </if>
            <if test="request.tableComment != null and request.tableComment != ''">
                AND TABLE_COMMENT LIKE concat('%', #{request.tableComment}, '%')
            </if>
            <if test="request.createTime != null">
                AND CREATE_TIME >= #{request.createTime}
            </if>
            <if test="request.updateTime != null">
                AND UPDATE_TIME >= #{request.updateTime}
            </if>
        </where>
    </select>

    <!-- 添加根据表名查询数据库表信息的SQL映射 -->
    <select id="selectDatabaseTablesByNames" resultType="cn.zhangchuangla.generator.model.entity.DatabaseTable">
        select table_name, table_comment, create_time, update_time
        from information_schema.tables
        where table_schema = (select database())
        and table_name in
        <foreach collection="tableNames" item="tableName" open="(" separator="," close=")">
            #{tableName}
        </foreach>
    </select>

    <!-- 添加根据表名查询表字段信息的SQL映射 -->
    <select id="selectDbTableColumnsByName" resultType="cn.zhangchuangla.generator.model.entity.GenTableColumn">
        select column_name,
               column_comment,
               column_type,
               (case when column_key = 'PRI' then '1' else '0' end)       as is_pk,
               (case when extra = 'auto_increment' then '1' else '0' end) as is_increment,
               (case when is_nullable = 'NO' then '1' else '0' end)       as is_required,
               ordinal_position                                           as sort
        from information_schema.columns
        where table_schema = (select database())
          and table_name = #{tableName}
        order by ordinal_position
    </select>
</mapper>
