<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.zhangchuangla.generator.mapper.GenTableMapper">

    <resultMap type="cn.zhangchuangla.generator.model.vo.DbTableVO" id="DbTableVOResult">
        <result property="tableName" column="table_name"/>
        <result property="tableComment" column="table_comment"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <resultMap type="cn.zhangchuangla.generator.model.entity.GenTableColumn" id="DbTableColumnResult">
        <result property="columnName" column="column_name"/>
        <result property="columnComment" column="column_comment"/>
        <result property="columnType" column="column_type"/>
        <result property="sort" column="ordinal_position"/>
        <result property="isPk" column="is_pk"/>
        <result property="isIncrement" column="is_increment"/>
        <result property="isRequired" column="is_required"/>
        <!-- javaType and javaField are usually derived in service layer -->
    </resultMap>

    <select id="selectDbTableList" resultMap="DbTableVOResult">
        SELECT table_name, table_comment, create_time, update_time
        FROM information_schema.TABLES
        WHERE table_schema = (SELECT DATABASE())
        <if test="tableName != null and tableName != ''">
            AND lower(table_name) like lower(concat('%', #{tableName}, '%'))
        </if>
        ORDER BY table_name
    </select>

    <select id="selectDbTableByName" resultMap="DbTableVOResult">
        SELECT table_name, table_comment, create_time, update_time
        FROM information_schema.TABLES
        WHERE table_schema = (SELECT DATABASE())
          and table_name = #{tableName}
    </select>

    <select id="selectDbTableColumnsByName" resultMap="DbTableColumnResult">
        SELECT column_name,
               ordinal_position,
               column_comment,
               column_type,
               (CASE WHEN column_key = 'PRI' THEN '1' ELSE '0' END)            AS is_pk,
               (CASE WHEN extra like '%auto_increment%' THEN '1' ELSE '0' END) AS is_increment,
               (CASE WHEN is_nullable = 'NO' THEN '1' ELSE '0' END)            AS is_required
        FROM information_schema.COLUMNS
        WHERE table_schema = (SELECT DATABASE())
          AND table_name = #{tableName}
        ORDER BY ordinal_position
    </select>

    <select id="selectDbTableListExcludeGenTable" resultMap="DbTableVOResult">
        SELECT table_name, table_comment, create_time, update_time
        FROM information_schema.TABLES
        WHERE table_schema = (SELECT DATABASE())
        AND table_name NOT IN (SELECT table_name FROM gen_table)
        <if test="tableName != null and tableName != ''">
            AND lower(table_name) like lower(concat('%', #{tableName}, '%'))
        </if>
        ORDER BY table_name
    </select>

    <update id="executeDDL">
        ${sql}
    </update>

    <!-- 
        selectGenTableByName 和 selectGenTableList (分页) 
        通常由 MyBatis Plus BaseMapper 和 ServiceImpl 中的 Wrapper/Page 方法处理。
        如果需要更复杂的 SQL 或 joins，可以在这里定义。
        例如，如果 GenTableServiceImpl 中的 this.getOne() 或 this.page() 不满足，可以取消注释并实现以下方法。
    -->
    <!-- 
    <select id="selectGenTableByName" resultType="cn.zhangchuangla.generator.model.entity.GenTable">
        SELECT * from gen_table where table_name = #{tableName}
    </select>

    <select id="selectGenTableList" resultType="cn.zhangchuangla.generator.model.entity.GenTable">
        SELECT t.* 
        FROM gen_table t
        <where>
            <if test="request.tableName != null and request.tableName != ''">
                AND t.table_name like concat('%', #{request.tableName}, '%')
            </if>
            <if test="request.tableComment != null and request.tableComment != ''">
                AND t.table_comment like concat('%', #{request.tableComment}, '%')
            </if>
            <if test="request.beginTime != null and request.beginTime != ''">
                AND date_format(t.create_time,'%y%m%d') &gt;= date_format(#{request.beginTime},'%y%m%d')
            </if>
            <if test="request.endTime != null and request.endTime != ''">
                AND date_format(t.create_time,'%y%m%d') &lt;= date_format(#{request.endTime},'%y%m%d')
            </if>
        </where>
    </select>
    -->

</mapper> 