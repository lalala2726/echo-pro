package ${packageName}.${moduleName}.service.impl;

import ${packageName}.${moduleName}.mapper.${className}Mapper;
import ${packageName}.${moduleName}.mapper.${subClassName}Mapper;
import ${packageName}.${moduleName}.model.entity.${className};
import ${packageName}.${moduleName}.model.entity.${subClassName};
import ${packageName}.${moduleName}.model.request.${classNameLower}.${className}AddRequest;
import ${packageName}.${moduleName}.model.request.${classNameLower}.${className}ListRequest;
import ${packageName}.${moduleName}.model.request.${classNameLower}.${className}UpdateRequest;
import ${packageName}.${moduleName}.service.${className}Service;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * ${tableComment} 服务实现类
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
@RequiredArgsConstructor
public class ${className}ServiceImpl extends ServiceImpl<${className}Mapper, ${className}>
        implements ${className}Service {

    private final ${className}Mapper ${classNameLower}Mapper;
    private final ${subClassName}Mapper ${subClassNameLower}Mapper;

    /**
     * ${tableComment}列表
     *
     * @param request 操作结果
     * @return 返回分页列表
     */
    @Override
    public Page<${className}> list${className}(${className}ListRequest request) {
        Page<${className}> page = new Page<>(request.getPageNum(), request.getPageSize());
        return ${classNameLower}Mapper.list${className}(page, request);
    }

    /**
     * 添加${tableComment}
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean add${className}(${className}AddRequest request) {
        ${className} ${classNameLower} =new ${className}();
        BeanUtils.copyProperties(request, ${classNameLower});

        // 保存主表
        boolean result = save(${classNameLower});

        // 保存子表数据
        if (result && request.get${subClassName}List() != null && !request.get${subClassName}List().isEmpty()) {
            List<${subClassName}> ${subClassNameLower}List = request.get${subClassName}List();
            for (${subClassName} ${subClassNameLower} :${subClassNameLower}List){
                ${subClassNameLower}.set${subTableFkName}(${classNameLower}.get${primaryKey.javaFieldCapitalize}());
            }
            result = ${subClassNameLower}Mapper.insertBatch(${subClassNameLower}List) > 0;
        }

        return result;
    }

    /**
     * 删除${tableComment}
     *
     * @param ids ${tableComment}ID集合
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean delete${className}(List<Long> ids) {
        // 删除主表
        boolean result = removeByIds(ids);

        // 删除子表数据
        if (result) {
            for (Long id : ids) {
                LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
                queryWrapper.eq(${subClassName}::get${subTableFkName}, id);
                    ${subClassNameLower}Mapper.delete(queryWrapper);
            }
        }

        return result;
    }

    /**
     * 根据ID查询${tableComment}信息
     *
     * @param id 请求参数
     * @return 操作结果
     */
    @Override
    public ${className} get${className}ById(Long id) {
        ${className} ${classNameLower} =getById(id);
        if (${classNameLower} !=null){
            // 查询子表数据
            LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
            queryWrapper.eq(${subClassName}::get${subTableFkName}, id);
            List<${subClassName}> ${subClassNameLower}List = ${subClassNameLower}Mapper.selectList(queryWrapper);
            ${classNameLower}.set${subClassName}List(${subClassNameLower}List);
        }
        return ${classNameLower};
    }

    /**
     * 修改${tableComment}信息
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean update${className}(${className}UpdateRequest request) {
        ${className} ${classNameLower} =new ${className}();
        BeanUtils.copyProperties(request, ${classNameLower});

        // 更新主表
        boolean result = updateById(${classNameLower});

        // 删除原有子表数据
        if (result) {
            LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
            queryWrapper.eq(${subClassName}::get${subTableFkName}, request.get${primaryKey.javaFieldCapitalize}());
                ${subClassNameLower}Mapper.delete(queryWrapper);

            // 添加新的子表数据
            if (request.get${subClassName}List() != null && !request.get${subClassName}List().isEmpty()) {
                List<${subClassName}> ${subClassNameLower}List = request.get${subClassName}List();
                for (${subClassName} ${subClassNameLower} :${subClassNameLower}List){
                    ${subClassNameLower}.set${subTableFkName}(${classNameLower}.get${primaryKey.javaFieldCapitalize}());
                }
                result = ${subClassNameLower}Mapper.insertBatch(${subClassNameLower}List) > 0;
            }
        }

        return result;
    }
} 