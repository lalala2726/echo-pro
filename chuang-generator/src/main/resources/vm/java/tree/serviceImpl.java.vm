package ${packageName}.service.impl;

import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.model.request.${businessName}.${ClassName}AddRequest;
import ${packageName}.model.request.${businessName}.${ClassName}QueryRequest;
import ${packageName}.model.request.${businessName}.${ClassName}UpdateRequest;
import ${packageName}.service.${ClassName}Service;
import org.apache.commons.lang3.StringUtils;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * ${functionName} 服务实现类
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
@RequiredArgsConstructor
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}>
        implements ${ClassName}Service {

    private final ${ClassName}Mapper ${classNameLower}Mapper;

    /**
     * ${functionName}树形列表
     *
     * @param request 查询参数
     * @return 树形列表
     */
    @Override
    public List<${ClassName}> select${ClassName}Tree(${ClassName}QueryRequest request) {
        LambdaQueryWrapper<${ClassName}> queryWrapper = new LambdaQueryWrapper<>();
        
        // 根据查询条件构建查询
        if (StrUtil.isNotBlank(request.get${TreeName}())) {
            queryWrapper.like(${ClassName}::get${TreeName}, request.get${TreeName}());
        }
        
        List<${ClassName}> list = ${classNameLower}Mapper.selectList(queryWrapper);
        return buildTree(list, "0"); // 假设根节点的父ID为"0"
    }

    /**
     * 添加${functionName}
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    public boolean add${ClassName}(${ClassName}AddRequest request) {
        ${ClassName} ${classNameLower} = new ${ClassName}();
        BeanUtils.copyProperties(request, ${classNameLower});
        return save(${classNameLower});
    }

    /**
     * 根据ID删除${functionName}
     *
     * @param id ${functionName}ID
     * @return 操作结果
     */
    @Override
    public boolean delete${ClassName}ById(Long id) {
        // 检查是否有子节点
        LambdaQueryWrapper<${ClassName}> queryWrapper = new LambdaQueryWrapper<>();
        queryWrapper.eq(${ClassName}::get${TreeParentCode}, id);
        long count = count(queryWrapper);
        
        if (count > 0) {
            throw new RuntimeException("存在子节点，不允许删除");
        }
        
        return removeById(id);
    }

    /**
     * 根据ID查询${functionName}信息
     *
     * @param id ID
     * @return ${functionName}信息
     */
    @Override
    public ${ClassName} get${ClassName}ById(Long id) {
        return getById(id);
    }

    /**
     * 修改${functionName}信息
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    public boolean update${ClassName}(${ClassName}UpdateRequest request) {
        ${ClassName} ${classNameLower} = new ${ClassName}();
        BeanUtils.copyProperties(request, ${classNameLower});
        return updateById(${classNameLower});
    }

    /**
     * 构建树形结构
     *
     * @param list 数据列表
     * @param parentId 父级ID
     * @return 树形结构列表
     */
    @Override
    public List<${ClassName}> buildTree(List<${ClassName}> list, String parentId) {
        List<${ClassName}> tree = new ArrayList<>();
        
        for (${ClassName} item : list) {
            if (parentId.equals(String.valueOf(item.get${TreeParentCode}()))) {
                List<${ClassName}> children = buildTree(list, String.valueOf(item.get${TreeCode}()));
                item.setChildren(children);
                tree.add(item);
            }
        }
        
        return tree;
    }
} 