package ${packageName}.service.impl;

import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.mapper.${subClassName}Mapper;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.model.entity.${subClassName};
import ${packageName}.model.request.${businessName}.${ClassName}AddRequest;
import ${packageName}.model.request.${businessName}.${ClassName}QueryRequest;
import ${packageName}.model.request.${businessName}.${ClassName}UpdateRequest;
import ${packageName}.service.${ClassName}Service;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * ${functionName} 服务实现类
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
@RequiredArgsConstructor
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}>
        implements ${ClassName}Service {

    private final ${ClassName}Mapper ${classNameLower}Mapper;
    private final ${subClassName}Mapper ${subClassNameLower}Mapper;

    /**
     * ${functionName}分页列表
     *
     * @param request 查询参数
     * @return 分页列表
     */
    @Override
    public Page<${ClassName}> list${ClassName}(${ClassName}QueryRequest request) {
        Page<${ClassName}> page = new Page<>(request.getPageNum(), request.getPageSize());
        return ${classNameLower}Mapper.list${ClassName}(page, request);
    }

    /**
     * 添加${functionName}（包含子表数据）
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean add${ClassName}(${ClassName}AddRequest request) {
        ${ClassName} ${classNameLower} = new ${ClassName}();
        BeanUtils.copyProperties(request, ${classNameLower});

        // 保存主表
        boolean result = save(${classNameLower});

        // 保存子表数据
        if (result && request.get${subClassName}List() != null && !request.get${subClassName}List().isEmpty()) {
            List<${subClassName}> ${subClassNameLower}List = request.get${subClassName}List();
            for (${subClassName} ${subClassNameLower} : ${subClassNameLower}List) {
                // 注意: 此处的 ${subTableFkName} 来源于代码生成配置中的 "子表外键名"。
                // 它应该配置为子表实体类中表示外键的 Java 属性名 (驼峰式, 例如: orderId), 
                // 而不是数据库中的列名 (例如: order_id), 因为它将用于生成类似 setOrderId() 和 getOrderId() 的方法调用。
                // 例如: 如果子表实体类中有 private Long orderId; 并且它关联到主表ID,
                // 则 "子表外键名" 应配置为 "orderId"。
                ${subClassNameLower}.set${subTableFkName}(${classNameLower}.get${primaryKey.javaFieldCapitalize}());
            }
            result = ${subClassNameLower}Mapper.insertBatch(${subClassNameLower}List) > 0;
        }

        return result;
    }

    /**
     * 删除${functionName}（级联删除子表数据）
     *
     * @param ids ${functionName}ID集合
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean delete${ClassName}(List<Long> ids) {
        // 删除主表
        boolean result = removeByIds(ids);

        // 删除子表数据
        if (result) {
            for (Long id : ids) {
                LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
                queryWrapper.eq(${subClassName}::get${subTableFkName}, id);
                ${subClassNameLower}Mapper.delete(queryWrapper);
            }
        }

        return result;
    }

    /**
     * 根据ID查询${functionName}信息（包含子表数据）
     *
     * @param id ID
     * @return ${functionName}信息
     */
    @Override
    public ${ClassName} get${ClassName}ById(Long id) {
        ${ClassName} ${classNameLower} = getById(id);
        if (${classNameLower} != null) {
            // 查询子表数据
            LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
            queryWrapper.eq(${subClassName}::get${subTableFkName}, id);
            List<${subClassName}> ${subClassNameLower}List = ${subClassNameLower}Mapper.selectList(queryWrapper);
            ${classNameLower}.set${subClassName}List(${subClassNameLower}List);
        }
        return ${classNameLower};
    }

    /**
     * 修改${functionName}信息（包含子表数据）
     *
     * @param request 请求参数
     * @return 操作结果
     */
    @Override
    @Transactional(rollbackFor = Exception.class)
    public boolean update${ClassName}(${ClassName}UpdateRequest request) {
        ${ClassName} ${classNameLower} = new ${ClassName}();
        BeanUtils.copyProperties(request, ${classNameLower});

        // 更新主表
        boolean result = updateById(${classNameLower});

        // 删除原有子表数据
        if (result) {
            LambdaQueryWrapper<${subClassName}> queryWrapper = new LambdaQueryWrapper<>();
            queryWrapper.eq(${subClassName}::get${subTableFkName}, request.get${primaryKey.javaFieldCapitalize}());
            ${subClassNameLower}Mapper.delete(queryWrapper);

            // 重新插入子表数据
            if (request.get${subClassName}List() != null && !request.get${subClassName}List().isEmpty()) {
                List<${subClassName}> ${subClassNameLower}List = request.get${subClassName}List();
                for (${subClassName} ${subClassNameLower} : ${subClassNameLower}List) {
                    ${subClassNameLower}.set${subTableFkName}(request.get${primaryKey.javaFieldCapitalize}());
                }
                result = ${subClassNameLower}Mapper.insertBatch(${subClassNameLower}List) > 0;
            }
        }

        return result;
    }
} 