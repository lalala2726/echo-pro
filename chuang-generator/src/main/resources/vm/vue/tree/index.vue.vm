<template>
  <div class="app-container">
    <!-- 搜索区域 -->
    <div class="search-bar mb-12">
      <el-form ref="queryFormRef" :inline="true" :model="queryParams">
          #foreach($column in $columns)
              #if($column.isQuery == '1')
                <el-form-item label="$column.columnComment" prop="$column.javaField">
                    #if($column.htmlType == 'input')
                      <el-input
                          v-model="queryParams.$column.javaField"
                          clearable
                          placeholder="请输入$column.columnComment"
                          style="width: 200px"
                          @keyup.enter="handleQuery"
                      />
                    #elseif($column.htmlType == 'select' && $column.dictType && $column.dictType != '')
                      <el-select
                          v-model="queryParams.$column.javaField"
                          clearable
                          style="width: 200px"
                          placeholder="请选择$column.columnComment"
                      >
                        <el-option
                            v-for="dict in ${column.dictType}"
                            :key="dict.value"
                            :label="dict.label"
                            :value="dict.value"
                        />
                      </el-select>
                    #else
                      <el-input
                          v-model="queryParams.$column.javaField"
                          clearable
                          placeholder="请输入$column.columnComment"
                          style="width: 200px"
                          @keyup.enter="handleQuery"
                      />
                    #end
                </el-form-item>
              #end
          #end
        <el-form-item>
          <el-button :icon="Search" type="primary" @click="handleQuery">
            搜索
          </el-button>
          <el-button :icon="Refresh" @click="resetQuery">重置</el-button>
        </el-form-item>
      </el-form>
    </div>

    <!-- 操作按钮区域 -->
    <el-card shadow="never">
      <template #header>
        <div class="card-header">
          <span class="title">${functionName}管理</span>
          <div class="buttons">
            <el-button :icon="Plus" type="primary" @click="handleAdd">
              新增
            </el-button>
            <el-button :icon="Sort" @click="toggleExpandAll">
              展开/折叠
            </el-button>
          </div>
        </div>
      </template>

      <!-- 树形表格区域 -->
      <el-table
          v-loading="loading"
          :data="${businessName}List"
          row-key="${treeCode}"
          :tree-props="{ children: 'children', hasChildren: 'hasChildren' }"
          :default-expand-all="isExpandAll"
          border
          stripe
          style="width: 100%"
      >
          #foreach($column in $columns)
              #if($column.isList == '1')
                <el-table-column
                    align="left"
                    label="$column.columnComment"
                    prop="$column.javaField"
                    #if($column.javaField == $treeCode)
                    min-width="200"
                    #elseif($column.javaField == $pkColumn.javaField)
                    width="80"
                    #else
                    min-width="120"
                    #end
                    show-overflow-tooltip
                />
              #end
          #end
        <el-table-column
            align="center"
            label="创建时间"
            prop="createTime"
            width="160"
            show-overflow-tooltip
        />
        <el-table-column align="center" fixed="right" label="操作" width="200">
          <template #default="{ row }">
            <el-button
                :icon="Plus"
                link
                type="primary"
                @click="handleAddChild(row)"
            >
              新增
            </el-button>
            <el-button
                :icon="Edit"
                link
                type="primary"
                @click="handleUpdate(row)"
            >
              编辑
            </el-button>
            <el-button
                :icon="Delete"
                link
                type="danger"
                @click="handleDelete(row)"
            >
              删除
            </el-button>
          </template>
        </el-table-column>
      </el-table>
    </el-card>

    <!-- 表单对话框 -->
    <el-dialog
        v-model="formDialog.visible"
        :title="formDialog.title"
        :width="600"
        :close-on-click-modal="false"
        @close="handleFormClose"
    >
      <el-form
          ref="formRef"
          :model="formDialog.data"
          :rules="formRules"
          label-width="120px"
          :disabled="formDialog.type === 'view'"
      >
          #foreach($column in $columns)
              #if($column.isInsert == '1' || $column.isEdit == '1')
                <el-form-item label="$column.columnComment" prop="$column.javaField">
                    #if($column.javaField == $treeParentCode)
                      <el-tree-select
                          v-model="formDialog.data.$column.javaField"
                          :data="parentOptions"
                          :props="{ value: '${treeCode}', label: '${treeName}', children: 'children' }"
                          placeholder="请选择父级$column.columnComment"
                          check-strictly
                          :render-after-expand="false"
                          style="width: 100%"
                      />
                    #elseif($column.htmlType == 'textarea')
                      <el-input
                          v-model="formDialog.data.$column.javaField"
                          type="textarea"
                          placeholder="请输入$column.columnComment"
                          :rows="4"
                      />
                    #elseif($column.htmlType == 'select' && $column.dictType && $column.dictType != '')
                      <el-select
                          v-model="formDialog.data.$column.javaField"
                          placeholder="请选择$column.columnComment"
                          clearable
                          style="width: 100%"
                      >
                          <el-option
                              v-for="dict in ${column.dictType}"
                              :key="dict.value"
                              :label="dict.label"
                              :value="dict.value"
                          />
                      </el-select>
                    #else
                      <el-input
                          v-model="formDialog.data.$column.javaField"
                          placeholder="请输入$column.columnComment"
                          clearable
                      />
                    #end
                </el-form-item>
              #end
          #end
      </el-form>
      <template #footer>
        <div class="dialog-footer">
          <el-button @click="handleFormClose">取消</el-button>
          <el-button
              v-if="formDialog.type !== 'view'"
              type="primary"
              :loading="submitLoading"
              @click="handleSubmit"
          >
            确定
          </el-button>
        </div>
      </template>
    </el-dialog>
  </div>
</template>

<script lang="ts" setup>
  import {onMounted, reactive, ref} from "vue";
  import type {FormInstance, FormRules} from "element-plus";
  import {ElMessage, ElMessageBox} from "element-plus";
  import {
      Delete,
      Edit,
      Plus,
      Refresh,
      Search,
      Sort
  } from "@element-plus/icons-vue";
  import {
      add${ClassName},
      delete${ClassName},
      get${ClassName}Tree,
      update${ClassName}
  } from "@/api/${moduleName}/${businessName}";

  // 查询参数
  const queryParams = reactive<any>({});

  // 表格数据
  const ${businessName}List = ref<any[]>([]);
  const loading = ref(false);
  const queryFormRef = ref<FormInstance>();
  const isExpandAll = ref(false);

  // 父级选项
  const parentOptions = ref<any[]>([]);

  // 表单相关
  const formRef = ref<FormInstance>();
  const submitLoading = ref(false);

  // 表单对话框
  const formDialog = reactive({
    visible: false,
    type: "add" as "add" | "edit" | "view",
    title: "",
    data: {} as any
  });

  // 表单验证规则
  const formRules: FormRules = {
      #foreach($column in $columns)
          #if($column.isRequired == '1' && $column.isPk != '1')
                  $column.javaField: [
              {required: true, message: "请输入$column.columnComment", trigger: "blur"}
            ],
          #end
      #end
  };

  // 获取${functionName}树形列表
  const handleQuery = async () => {
    loading.value = true;
    try {
      const res = await get${ClassName}Tree(queryParams);
      if (res && res.data) {
              ${businessName}List.value = res.data || [];
        // 构建父级选项（用于新增/编辑时选择父级）
        parentOptions.value = buildParentOptions(res.data);
      } else {
              ${businessName}List.value = [];
        parentOptions.value = [];
      }
    } catch (error) {
      console.error("获取${functionName}列表失败", error);
      ElMessage.error("获取${functionName}列表失败");
            ${businessName}List.value = [];
      parentOptions.value = [];
    } finally {
      loading.value = false;
    }
  };

  // 构建父级选项
  const buildParentOptions = (list: any[], level = 0): any[] => {
    const options: any[] = [];

    // 添加顶级选项
    if (level === 0) {
      options.push({
              ${treeCode}: 0,
              ${treeName}: "顶级${functionName}",
        children: []
      } as any);
    }

    list.forEach(item => {
      const option = {
        ...item,
              ${treeName}: "　".repeat(level) + item.${treeName}
      };
      options.push(option);

      if (item.children && item.children.length > 0) {
        options.push(...buildParentOptions(item.children, level + 1));
      }
    });

    return options;
  };

  // 重置查询条件
  const resetQuery = () => {
    queryFormRef.value?.resetFields();
    handleQuery();
  };

  // 展开/折叠切换
  const toggleExpandAll = () => {
    isExpandAll.value = !isExpandAll.value;
  };

  // 新增${functionName}
  const handleAdd = () => {
    formDialog.visible = true;
    formDialog.type = "add";
    formDialog.title = "新增${functionName}";
    formDialog.data = {
            ${treeParentCode}: 0,
        #foreach($column in $columns)
            #if($column.isInsert == '1' || $column.isEdit == '1')
                $column.javaField: #if($column.javaType == 'String')""
                #elseif($column.javaType == 'number')0#else undefined#end,
            #end
        #end
    } as any;
  };

  // 新增子${functionName}
  const handleAddChild = (row: any) => {
    formDialog.visible = true;
    formDialog.type = "add";
    formDialog.title = "新增子${functionName}";
    formDialog.data = {
            ${treeParentCode}: row.${treeCode},
        #foreach($column in $columns)
            #if($column.isInsert == '1' || $column.isEdit == '1')
                $column.javaField: #if($column.javaType == 'String')""
                #elseif($column.javaType == 'number')0#else undefined#end,
            #end
        #end
    } as any;
  };

  // 编辑${functionName}
  const handleUpdate = (row: any) => {
    formDialog.visible = true;
    formDialog.type = "edit";
    formDialog.title = "编辑${functionName}";
    formDialog.data = {...row} as any;
  };

  // 删除${functionName}
  const handleDelete = (row: any) => {
    // 检查是否有子节点
    if (row.children && row.children.length > 0) {
      ElMessage.warning("存在子节点，不允许删除");
      return;
    }

    ElMessageBox.confirm(`是否确认删除${functionName}"` + row.${treeName} + `"?`, "警告", {
      confirmButtonText: "确定",
      cancelButtonText: "取消",
      type: "warning"
    })
        .then(async () => {
          try {
            await delete${ClassName}([row.${pkColumn.javaField}]);
            ElMessage.success("删除成功");
            handleQuery();
          } catch (error) {
            console.error("删除失败", error);
            ElMessage.error("删除失败");
          }
        })
        .catch(() => {
        });
  };

  // 提交表单
  const handleSubmit = async () => {
    if (!formRef.value) return;

    try {
      await formRef.value.validate();
      submitLoading.value = true;

      if (formDialog.type === "add") {
        await add${ClassName}(formDialog.data);
        ElMessage.success("新增成功");
      } else if (formDialog.type === "edit") {
        await update${ClassName}(formDialog.data);
        ElMessage.success("修改成功");
      }

      formDialog.visible = false;
      handleQuery();
    } catch (error) {
      console.error("提交失败", error);
      ElMessage.error("提交失败");
    } finally {
      submitLoading.value = false;
    }
  };

  // 表单关闭回调
  const handleFormClose = () => {
    formRef.value?.resetFields();
    formDialog.visible = false;
  };

  // 页面初始化时加载数据
  onMounted(() => {
    handleQuery();
  });
</script>

<style lang="scss" scoped>
  .app-container {
    padding: 20px;

    .search-bar {
      padding: 20px;
      margin-bottom: 20px;
      background-color: var(--el-bg-color);
      border-radius: 4px;
      box-shadow: 0 1px 4px rgb(0 0 0 / 8%);
      border: 1px solid var(--el-border-color-light);
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;

      .title {
        font-weight: bold;
        font-size: 16px;
      }

      .buttons {
        display: flex;
        gap: 10px;
        margin-left: auto;
      }
    }

    .mb-12 {
      margin-bottom: 12px;
    }
  }

  .dialog-footer {
    text-align: right;
  }

  .avatar-uploader {
    :deep(.el-upload) {
      border: 1px dashed var(--el-border-color);
      border-radius: 6px;
      cursor: pointer;
      position: relative;
      overflow: hidden;
      transition: var(--el-transition-duration-fast);

      &:hover {
        border-color: var(--el-color-primary);
      }
    }
  }

  .avatar-uploader-icon {
    font-size: 28px;
    color: #8c939d;
    width: 178px;
    height: 178px;
    text-align: center;
    line-height: 178px;
  }

  .avatar {
    width: 178px;
    height: 178px;
    display: block;
  }

  .editor-container {
    border: 1px solid var(--el-border-color);
    border-radius: 4px;
    overflow: hidden;

    :deep(.el-textarea__inner) {
      border: none;
      box-shadow: none;
    }
  }

  :deep(.el-card) {
    background-color: var(--el-bg-color);
    border-color: var(--el-border-color-light);
    color: var(--el-text-color-primary);
  }

  :deep(.el-card__header) {
    border-bottom-color: var(--el-border-color-light);
  }

  :deep(.el-table) {
    background-color: var(--el-bg-color);
    color: var(--el-text-color-primary);
    --el-table-border-color: var(--el-border-color-lighter);
  }

  :deep(.el-table th) {
    background-color: var(--el-fill-color-light) !important;
  }

  :deep(.el-table--border th) {
    border-color: var(--el-border-color-lighter);
  }

  :deep(.el-table td) {
    border-color: var(--el-border-color-lighter);
  }

  :deep(.el-table--border) {
    border-color: var(--el-border-color-lighter);
  }

  :deep(.el-button) {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
  }

  :deep(.el-button--link) {
    justify-content: center;
    padding: 0 5px;
  }
</style>
